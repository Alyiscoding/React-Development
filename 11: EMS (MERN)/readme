# 🚀 EMS – Employee Management System

A full-featured **Employee Management System** (EMS) built using the **MERN Stack** (MongoDB, Express.js, React.js, Node.js). The application provides a robust interface for managing users, tasks, and admin functionalities, showcasing concepts of modern React development, secure backend architecture, and responsive UI using popular component libraries.

---

## 📚 Tech Stack

### 🔧 Backend

* **Node.js**
* **Express.js**
* **MongoDB (Atlas)** with **Mongoose**
* **bcrypt.js** for password hashing
* **dotenv** for environment variable management
* **JWT (optional)** for token-based authentication (can be added for future enhancements)

### 🌐 Frontend

* **React.js (Modern Functional Approach)**
* **React Router DOM** for SPA routing
* **React Hooks** – `useState`, `useEffect`, `useContext`
* **UI Libraries**:

  * 💠 **Chakra UI**
  * 🎨 **Material UI (MUI)**
  * 🌊 **Flowbite (Tailwind CSS Components)**

---

## ✅ Features

### 👥 User Management

* Register new employees with roles (admin or employee)
* Secure password storage using hashing
* Role-based logic implementation
* Update and delete user records

### 📋 Task Management

* Add, update, delete tasks
* Assign tasks to specific employees
* Track task status: `active`, `completed`, `failed`, `new`
* Auto-sync task counts for each user

### 🧠 Modern React Concepts

* Component-driven architecture
* React hooks for state and effect management
* Conditional rendering based on role
* Responsive UI using reusable components from Chakra UI, MUI, and Flowbite

### 🔐 Authentication (Pluggable)

* Admin login support
* Basic route protection logic (JWT integration possible)

---

## ⚙️ Installation & Setup

### 1. Clone the Repository

```bash
git clone https://github.com/your-username/ems.git
cd ems
```

### 2. Backend Setup

```bash
cd backend
npm install
```

#### Create a `.env` file in the backend directory:

```env
MONGODB_URI=mongodb+srv://<username>:<password>@cluster0.mongodb.net/ems-db?retryWrites=true&w=majority
ADMIN_EMAIL=admin@me.com
ADMIN_PASSWORD=admin
PORT=4000
```

### 3. Start Backend Server

```bash
npm run dev
```

---

### 4. Frontend Setup

```bash
cd ../frontend
npm install
```

### 5. Start Frontend

```bash
npm start
```

---

## 🖼️ Screenshots

| Feature   | Preview                                   |
| --------- | ----------------------------------------- |
| Login     | ![Login](./screenshots/login.png)         |
| Dashboard | ![Dashboard](./screenshots/dashboard.png) |
| Task View | ![Tasks](./screenshots/tasks.png)         |

> *Make sure to add actual screenshots in a `screenshots/` folder.*

---

## 📁 Folder Structure

```
ems/
├── backend/
│   ├── models/
│   ├── routes/
│   ├── controllers/
│   ├── server.js
│   └── .env
└── frontend/
    ├── src/
    │   ├── components/
    │   ├── pages/
    │   ├── App.js
    │   └── index.js
```

---

## 🌟 Highlights

* Full CRUD functionality
* Responsive design across devices
* Role-based features and conditional UI
* Modular codebase following clean architecture
* Scalable with future enhancements (e.g., JWT, email notifications, etc.)

---

## 🧑‍💻 Author

**Syed Ali Sher Dil**
📧 [syedalisher832@gmail.com](mailto:syedalisher832@gmail.com)
📱 03104655311

---

## 💡 Future Improvements

* 🔒 Add JWT-based secure authentication
* 📨 Email notifications for task assignments
* 📈 Analytics dashboard for admins
* 📲 PWA support for mobile-first access

